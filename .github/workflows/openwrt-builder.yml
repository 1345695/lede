#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  schedule:
    - cron: 0 2 * * 1,5
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: 检查服务器配置
      run: |
        echo "已知CPU型号（降序）：7763,8370C,8272CL,8171M,E5系列"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo -e "$(df -hT)"
    - name: 清理系统
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone -b $REPO_BRANCH --single-branch --filter=blob:none $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        cd openwrt
        sudo wget https://raw.githubusercontent.com/coolsnowwolf/lede/8f7e660d4dd97bc9c9f6913e469c1b8417110445/feeds.conf.default -O feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f
        cd ..
        wget https://github.com/coolsnowwolf/lede/archive/111e93f75dee275531d5ab06d398a772ca3ddf21.zip -O ledess.zip
        unzip ledess.zip
        sudo rm -rf openwrt/package/kernel/r8168
        sudo cp -r lede-111e93f75dee275531d5ab06d398a772ca3ddf21/package/kernel/r8168/ openwrt/package/kernel/r8168
        sudo git clone -b main --single-branch --filter=blob:none https://github.com/1345695/lede
        sudo git clone https://github.com/kenzok8/openwrt-packages pack
        sudo git clone -b v5-lua https://github.com/sbwml/luci-app-mosdns mosdns-lua
        sudo git clone -b v5 https://github.com/sbwml/luci-app-mosdns mosdns-v5
        sudo cp -r lede/files/ openwrt/files
        sudo cp -r pack/luci-app-adguardhome/ openwrt/package/lean/luci-app-adguardhome
        sudo cp -r mosdns-lua/luci-app-mosdns/ openwrt/package/lean/luci-app-mosdns
        sudo cp -r mosdns-v5/mosdns/ openwrt/package/lean/mosdns
        sudo cp -r mosdns-v5/v2dat/ openwrt/package/lean/v2dat
        sudo git clone -b dev --single-branch --filter=blob:none https://github.com/vernesong/OpenClash OpenClash
        sudo cp -r OpenClash/luci-app-openclash/ openwrt/package/lean/luci-app-openclash
        sudo rm -rf pack
        sudo rm -rf mosdns-lua
        sudo rm -rf mosdns-v5
        sudo rm -rf OpenClash
        cd openwrt
        sudo sed -i 's/KERNEL_PATCHVER:=6.6/KERNEL_PATCHVER:=6.12/g' target/linux/x86/Makefile
        sudo sed -i "s/https:\/\/github.com\/Loyalsoldier\/v2ray-rules-dat\/releases\/latest\/download/http:\/\/10.0.0.10\/meta\/geo/g" package/lean/luci-app-mosdns/root/usr/share/mosdns/mosdns.sh
        sudo sed -i "s/https:\/\/github.com\/Loyalsoldier\/geoip\/releases\/latest\/download\/geoip-only-cn-private.dat/http:\/\/10.0.0.10\/meta\/geo\/geoip.dat/g" package/lean/luci-app-mosdns/root/usr/share/mosdns/mosdns.sh
        sudo sed -i 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL/CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE/g' target/linux/x86/64/config-5.15
        sudo sed -i '/CONFIG_CPU_FREQ_GOV_SCHEDUTIL/a\CONFIG_CPU_FREQ_GOV_PERFORMANCE=y' target/linux/x86/64/config-5.15
        sudo sed -i 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL/CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE/g' target/linux/x86/64/config-6.6
        sudo sed -i '/CONFIG_CPU_FREQ_GOV_SCHEDUTIL/a\CONFIG_CPU_FREQ_GOV_PERFORMANCE=y' target/linux/x86/64/config-6.6
        sudo sed -i 's/CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL/CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE/g' target/linux/x86/64/config-6.12
        sudo sed -i '/CONFIG_CPU_FREQ_GOV_SCHEDUTIL/a\CONFIG_CPU_FREQ_GOV_PERFORMANCE=y' target/linux/x86/64/config-6.12
        sudo sed -i 's/CONFIG_DRM_I915=y/# CONFIG_DRM_I915=y/g' target/linux/x86/64/config-6.12
        sudo sed -i "s/set network.globals.ula_prefix='auto'//g" package/base-files/files/bin/config_generate
        sudo sed -i 's/192.168.1.1/192.168.50.1/g' package/base-files/files/bin/config_generate
        sudo sed -i "s/set network.globals.ula_prefix='auto'//g" package/base-files/luci2/bin/config_generate
        sudo sed -i 's/192.168.1.1/192.168.50.1/g' package/base-files/luci2/bin/config_generate
        sudo sed -i 's/192.168.1.1/192.168.50.1/g' package/base-files/Makefile
        sudo sed -i 's/$1$V4UetPzk$CYXluq4wUazHjmCDBCqXF.:0:0:99999:7:::/$1$eK1Ot.KS$t3PuFw0Az1qM6Plz2Ki9P0:19541:0:99999:7:::/g' package/lean/default-settings/files/zzz-default-settings
        sudo sed -i '/customized in this file/a net.netfilter.nf_conntrack_max=6553500' package/base-files/files/etc/sysctl.conf
        sudo -e "net.ipv6.conf.all.accept_ra = 2\nnet.ipv6.conf.all.use_tempaddr = 2\nnet.ipv6.conf.default.use_tempaddr = 2\nnet.ipv6.conf.default.addr_gen_mode = 3\nnet.ipv6.conf.all.addr_gen_mode = 3" | tee -a package/base-files/files/etc/sysctl.conf
        sudo git clone https://github.com/sbwml/v2ray-geodata.git package/lean/v2ray-geodata
        sudo git clone https://github.com/1345695/openwrt-smartdns.git package/lean/smartdns
        sudo git clone -b lede https://github.com/pymumu/luci-app-smartdns.git package/lean/luci-app-smartdns
        sudo git clone -b 18.06 https://github.com/jerrykuku/luci-theme-argon.git package/lean/luci-theme-argon
        sudo git clone -b 18.06 https://github.com/jerrykuku/luci-app-argon-config.git package/lean/luci-app-argon-config
        sudo rm -rf feeds/packages/net/v2ray-geodata
        sudo rm -rf feeds/packages/net/mosdns
        sudo rm -rf feeds/packages/net/smartdns
        sudo rm -rf feeds/packages/net/v2dat
        sudo rm -rf feeds/luci/themes/luci-theme-argon-mod
        sudo rm -rf feeds/luci/themes/luci-theme-argon
        sudo rm -rf feeds/luci/applications/luci-app-argon-config
        sudo rm -rf feeds/luci/applications/luci-app-smartdns
        sudo rm -rf feeds/luci/applications/luci-app-mosdns
        sudo rm -rf feeds/luci/applications/luci-app-openclash
        ./scripts/feeds update -a
        ./scripts/feeds install -a -f
        ls feeds/luci/themes
        ls feeds/luci/applications
        ls package/lean
    - name: Load custom configuration
      run: |
        [ -e files ] && sudo mv files openwrt/files
        [ -e background ] && sudo mv background  openwrt/package/lean/luci-theme-argon/htdocs/luci-static/argon/background
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Free Disk Space After Build
      run: |
        echo "Disk space before post-build cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space after post-build cleanup:"
        df -h
        
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}